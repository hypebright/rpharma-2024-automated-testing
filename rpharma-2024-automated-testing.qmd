---
title: "Automated Testing with GitHub Actions"
author: "Veerle Eeftink - van Leemput"
format:
  revealjs: 
    theme: [default, custom.scss]
    footer: "[github.com/hypebright/rpharma-2024-automated-testing](https://github.com/hypebright/rpharma-2024-automated-testing)"
    logo: images/logo.png
include-in-header: 
  text: |
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
highlight-style: "nord"
---

# Hey 👋

Ready for a 10-minute crash course on automated testing with GitHub Actions?! ⚡️ 

# Why testing?

![testing meme](images/testing-meme.jpg)

# Why testing?

* Ensures code quality
* Reduces bugs
* Saves time
* Increases confidence in code changes

# How would you do it?

You have developed an R package and you want to test it. You would typically:

1. Write tests
2. Run tests with `devtools::test()`
3. Fix bugs
4. Repeat and push changes

Harsh reality: you will either skip 2 because you're too busy, or you will simply forget 2 (and 3) before pushing changes. 😬

# How would you do it?

You have developed an Shiny app and you want to test it. You would typically:

1. Manually test the app
2. Fix bugs
3. Repeat and push changes

Harsh reality: you're manual testing will become so annoying that you will skip 1 and 2 before pushing changes. 😬

# Work smarter, not harder!

Writing tests is just the first step. You need to automate the testing process to ensure that tests are run every time you push changes. Write tests once, enjoy them forever!

# What do you need?

* An R package (see https://github.com/hypebright/RPharmaTest)
* `testthat`
* `shinytest2` in the case of a Shiny app
* `covr` optionally, for checking test coverage
* GitHub Actions for automating the testing process

# testthat

# shinytest2

# covr

With `covr`, you can check the test coverage of your package. You can use the `covr` package to generate a test coverage report, which you can then use to improve your tests.

* `covr::package_coverage()` generates a test coverage report
* `covr::function_coverage()` calculates coverage for a specific function

# Another additional step?!

# 👋 Hello, GitHub Actions!

# GitHub Actions

With GitHub Actions, you can **automate** things ✨. You can create custom workflows that run every time you push changes to your repository. Handy!

# GitHub Actions

To run Actions, you create a `.github/workflows` directory in your repo In here, you create `.yml` files that define the workflows.

You can have one big workflow file, or you can split it up into **multiple workflow files**.

# GitHub Actions

Two workflows files:

* R-CMD-check: checks the package, which includes running tests
* test-coverage: checks the test coverage

# GitHub Actions

Two workflows:

* R-CMD-check: `usethis::use_github_action("check-standard", badge = TRUE)`
* test-coverage: `usethis::use_github_action("test-coverage", badge = TRUE)`

# GitHub Actions

TODO: xplain what happens in de code

# GitHub Actions

TODO: add example of succeeded workflow

# GitHub Actions

TODO: add example of failed workflow

# Results 👏

* Forgetting to run tests is no excuse anymore
* You automatically get notified when a test fails
* You can always show QA that your code is X% covered by tests

# Showing off your efforts 💪

Badges. Show them off in your README. Bonus: remember the `badge = TRUE` argument in the `usethis::use_github_action()` function? This will automatically add the badge to your README!

# Showing off your efforts 💪

TODO: image of badges in repo

# Want to learn more?

* Check out GitHub for all the relevant files to get you started
* Open a discussion or issue on GitHub if you have any questions that weren't answered during this crash course
* Reach out to me on LinkedIn: [Veerle Eeftink - van Leemput](https://www.linkedin.com/in/veerlevanleemput/) (and while you there, give me a follow for weekly R and Shiny content! 🌟)
